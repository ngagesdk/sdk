# Stringtable.pl - Makes a string table cpp and .h file from a .st file

# Removes the extension from the filename
$ARGV[0] =~ m/(.*)\..*/;
$root = $1;
$root =~ m/.*[\\\/]([^\\\/]*)$/;
$header_to_include = "$1.h";

# Open the input filename
open (IN, "<$ARGV[0]" ) or die ("Error: $ARGV[0] No such file");

# Scan for the first non-comment line
do {
    $input = readline (*IN);
} while ($input =~ m/\#.*/);

# Check that line is of the right format and get the table name.
$input =~ m/(f*stringtable) ([A-Za-z0-9]*)/ or die ("Error: $ARGV[0] is not a stringtable file");
$name = $2;
if ($1 eq "stringtable") {
	$folding = "ETrue";
	} else {
	$folding = "EFalse";
	}

# Open the output filenames
open (CPP, ">$root.cpp" ) or die ("Error: $ARGV[0] Can't open cpp file");
open (HEADER, ">$root.h" ) or die ("Error: $ARGV[0] Can't open header file");

# Output the preambles
print CPP <<EOD;
// Autogenerated from $ARGV[0] by the stringtable tool - Do not edit
#include <e32std.h>
#include "StringPool.h"
#include "StringTableSupport.h"
#include "$header_to_include"
#ifdef _DEBUG
#undef _DEBUG
#endif

EOD

print HEADER <<EOD;
// Autogenerated from $ARGV[0] by the stringtable tool - Do not edit

#ifndef STRINGTABLE_$name
#define STRINGTABLE_$name

#include "StringPool.h"

struct TStringTable;

/** A String table */
class $name 
	{
public:
	enum TStrings
		{
EOD

$count = 0;
$outputcomma = 0;

#Now process file
until (eof IN) {
    # Skip comments
    do {
	$input = readline (*IN);
    } while ($input =~ m/\#.*/);

	if ($outputcomma == 1) {
		print HEADER ",\n";
		$outputcomma = 0;
	}
	if ($input =~ m/\!(.*)/) {
		# Line starts in a '!'. Remove the ! and output the rest to the header
		print HEADER "\t\t$1\n"
	} else {
		# Parse the line
		$input =~ m/([A-Za-z0-9]+)\s*(.*)/ or die ("Error: $ARGV[0] badly formed at \"$input\"");

		# Form a version of the string that can go in a comment. This
		# can't contain /* or */
		$string = $2;
		$enum = $1;
		$comment = $string;
		$comment =~ s|/\*|/ \*|g;
		$comment =~ s|\*/|\* /|g;

		# Increment the count
		$count++;
		print HEADER "\t\t/** $comment */\n";
		print HEADER "\t\t$enum";
		print CPP "_STLIT8(K$count, \"$string\");\n";
		$outputcomma = 1;
	}
}
    
#Output intermediate boilerplate in the cpp
print CPP <<EOD;

// Intermediate
const void * const KStringPointers[] =
	{
EOD

# And the end of the headers
print HEADER <<EOD;

		};
	static const TStringTable Table;	
	};

#endif // STRINGTABLE_$name

EOD

#Output the table of pointers to the cpp file
$total = $count;

for ($count = 1; $count <= $total ; $count++) {
    if ($count > 1) {
	print CPP ",\n";
    }
    print CPP "\t(const void*)&K$count";
};

#The last of the boilerplate
print CPP <<EOD;

	};
EOD

print CPP "const TStringTable ${name}::Table = {$total, KStringPointers, $folding};";
