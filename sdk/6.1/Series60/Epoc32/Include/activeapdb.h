/*
* ============================================================================
*  Name     : ActiveApDb.h
*  Part of  : Access Point Settings Handler UI
*
*  Description: Declaration of classes CActiveApDb
*               and MActiveApDbObserver.
*  Version:
*
*  Copyright (C) 2002 Nokia Corporation.
*  This material, including documentation and any related 
*  computer programs, is protected by copyright controlled by 
*  Nokia Corporation. All rights are reserved. Copying, 
*  including reproducing, storing,  adapting or translating, any 
*  or all of this material requires the prior written consent of 
*  Nokia Corporation. This material also contains confidential 
*  information which may not be disclosed to others without the 
*  prior written consent of Nokia Corporation.
*
* ============================================================================
*/

#ifndef ACTIVE_APDB_H
#define ACTIVE_APDB_H

//  INCLUDES
#include <commdb.h>
#include <ApEngineVer.h>


// CONSTANTS
const TInt KErrActiveApDbObserverNotFound = -500;

// FORWARD DECLARATION
class CActiveApDbNotifier;

// CLASS DECLARATION

/**
* Mixin protocol for handling events from a CCommsDatabase.
* Events are related to database changes and availability.
*/
class MActiveApDbObserver
    {
    public:     // types
        enum TEvent       /// Events reported to the database observer.
            {
            EDbChanged,   ///< Database has changed.
            EDbClosing,   ///< Database is about to close.
            EDbAvailable  ///< Database is available again.(E.g. after unlock)
            };

    public:     // new methods

        /**
        * Derived classes should implement this method, and act accordingly
        * to database events.
        * @param anEvent Database-related event.
        */
        IMPORT_C virtual void HandleApDbEventL( TEvent anEvent ) = 0;

    };

/**
* This class manages and guards database integrity
* by handling all events that are related to the database. These events
* may originate from the system (Shutdown, Backup/Restore) and from the
* database itself. The events are transformed into a simple protocol,
* defined by MActiveApDbObserver.
* Expects an active scheduler to be installed and running.
*/
class CActiveApDb : public CBase
    {

    public:     // Constructors and destructor
        /**
        * Two-phased constructor. Leaves on failure.
        * @param aType The desired type of the CCommsDatabase object.
        * Defaults to EDatabaseTypeIAP.
        * @return The constructed CActiveApDb object.
        */
        IMPORT_C static CActiveApDb* NewL
            ( TCommDbDatabaseType aType = EDatabaseTypeIAP );

        /**
        * Destructor.
        */
        IMPORT_C virtual ~CActiveApDb();

    protected:  // Constructors

        /**
        * Second phase constructor. Leaves on failure.
        * @param aType The desired type of the CCommsDatabase object.
        * events.
        */
        void ConstructL( TCommDbDatabaseType aType );

    public:     // new methods
        /**
        * Adds an observer to the list of observers to be notified
        * about the DB events.
        * Also automatically starts observation and notification.
        * The order of notification will be exactly the order of registration.
        * @param anObserver Observer to be notified about database-related
        * events.
        */
        IMPORT_C void AddObserverL( MActiveApDbObserver* anObserver );


        /**
        * Removes an observer. If not added, silently ignores.
        * @param anObserver The observer.
        */
        IMPORT_C void RemoveObserver( MActiveApDbObserver* anObserver );


        /**
        * Returns the CCommsDatabase.
        * Required because we can not derive from CCommsDatabase...
        */
        IMPORT_C CCommsDatabase*  Database();

    private:
        /**
        * Handle events from the database (DBMS).
        * The order of notification is the order of registration.
        * @param anEvent Event generated by DBMS. Values from
        * RDbNotifier::TEvent, or KErrCancel.
        */
        void HandleDbEventL( TInt anEvent );


        /**
        * Notify all observers about an event.
        * @param anEvent Event to be sent to observers.
        */
        void NotifyObserversL( MActiveApDbObserver::TEvent anEvent );

    friend class CActiveApDbNotifier;

    private:    // types
        /**
        * Default constructor. Can not leave.
        */
        CActiveApDb();


        enum TState             /// State of the finite state machine.
            {
            EClosed,            ///< Closed and idle.
            EReady,             ///< Open and ready for use.
            EWaitClose,         ///< Closed, waiting for other users to close.
            EWaitBackupRestore, ///< Closed, waiting Backup/Restore to finish.
            EWaitShutdown       ///< Closed, waiting to die.
            };

    private:        // Data
        CArrayPtrFlat<MActiveApDbObserver>* iObservers;   ///< Observers.

        CCommsDatabase*     iDb;    // Creates & owns it !
        // CommsDb has its own RDbNotifier...
        TState iState;  ///< Current state of the database.
        CActiveApDbNotifier*    iDbNotifier;
    };

#endif

// End of File
